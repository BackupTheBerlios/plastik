/*
 * RadioButtonPanel.java
 *
 * Created on 21. November 2005, 21:15
 */

package de.hampelratte.test;

/**
 *
 * @author  TBN
 */
public class CheckboxPanel extends javax.swing.JPanel {
	
	/** Creates new form RadioButtonPanel */
	public CheckboxPanel() {
		initComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        normal = new javax.swing.JCheckBox();
        selected = new javax.swing.JCheckBox();
        normalDisabled = new javax.swing.JCheckBox();
        selectedDisabled = new javax.swing.JCheckBox();
        normalColored = new javax.swing.JCheckBox();
        selectedColored = new javax.swing.JCheckBox();
        normalColoredDisabled = new javax.swing.JCheckBox();
        selectedColoredDisabled = new javax.swing.JCheckBox();
        normalNotFilled = new javax.swing.JCheckBox();
        selectedNotFilled = new javax.swing.JCheckBox();
        normalBorderPainted = new javax.swing.JCheckBox();
        selectedBorderPainted = new javax.swing.JCheckBox();
        normalBorderPaintedDisabled = new javax.swing.JCheckBox();
        selectedBorderPaintedDisabled = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        setName("JCheckBox");
        this.setSize(new java.awt.Dimension(487,265));
        normal.setText("normal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(normal, gridBagConstraints);

        selected.setSelected(true);
        selected.setText("selected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(selected, gridBagConstraints);

        normalDisabled.setText("disabled");
        normalDisabled.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(normalDisabled, gridBagConstraints);

        selectedDisabled.setSelected(true);
        selectedDisabled.setText("selected & disabled");
        selectedDisabled.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(selectedDisabled, gridBagConstraints);

        normalColored.setBackground(new java.awt.Color(255, 204, 0));
        normalColored.setForeground(new java.awt.Color(255, 0, 0));
        normalColored.setText("colored");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(normalColored, gridBagConstraints);

        selectedColored.setBackground(new java.awt.Color(255, 204, 0));
        selectedColored.setForeground(new java.awt.Color(255, 0, 0));
        selectedColored.setSelected(true);
        selectedColored.setText("selected & colored");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(selectedColored, gridBagConstraints);

        normalColoredDisabled.setBackground(new java.awt.Color(255, 204, 0));
        normalColoredDisabled.setForeground(new java.awt.Color(255, 0, 0));
        normalColoredDisabled.setText("colored & disabled");
        normalColoredDisabled.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(normalColoredDisabled, gridBagConstraints);

        selectedColoredDisabled.setBackground(new java.awt.Color(255, 204, 0));
        selectedColoredDisabled.setForeground(new java.awt.Color(255, 0, 0));
        selectedColoredDisabled.setSelected(true);
        selectedColoredDisabled.setText("selected & colored & disabled");
        selectedColoredDisabled.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(selectedColoredDisabled, gridBagConstraints);

        normalNotFilled.setText("not filled");
        normalNotFilled.setContentAreaFilled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(normalNotFilled, gridBagConstraints);

        selectedNotFilled.setSelected(true);
        selectedNotFilled.setText("selected & not filled");
        selectedNotFilled.setContentAreaFilled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(selectedNotFilled, gridBagConstraints);

        normalBorderPainted.setText("border painted");
        normalBorderPainted.setBorderPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(normalBorderPainted, gridBagConstraints);

        selectedBorderPainted.setSelected(true);
        selectedBorderPainted.setText("selected & border painted");
        selectedBorderPainted.setBorderPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(selectedBorderPainted, gridBagConstraints);

        normalBorderPaintedDisabled.setText("border painted");
        normalBorderPaintedDisabled.setBorderPainted(true);
        normalBorderPaintedDisabled.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(normalBorderPaintedDisabled, gridBagConstraints);

        selectedBorderPaintedDisabled.setSelected(true);
        selectedBorderPaintedDisabled.setText("selected & border painted");
        selectedBorderPaintedDisabled.setBorderPainted(true);
        selectedBorderPaintedDisabled.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(selectedBorderPaintedDisabled, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox normal;
    private javax.swing.JCheckBox normalBorderPainted;
    private javax.swing.JCheckBox normalBorderPaintedDisabled;
    private javax.swing.JCheckBox normalColored;
    private javax.swing.JCheckBox normalColoredDisabled;
    private javax.swing.JCheckBox normalDisabled;
    private javax.swing.JCheckBox normalNotFilled;
    private javax.swing.JCheckBox selected;
    private javax.swing.JCheckBox selectedBorderPainted;
    private javax.swing.JCheckBox selectedBorderPaintedDisabled;
    private javax.swing.JCheckBox selectedColored;
    private javax.swing.JCheckBox selectedColoredDisabled;
    private javax.swing.JCheckBox selectedDisabled;
    private javax.swing.JCheckBox selectedNotFilled;
    // End of variables declaration//GEN-END:variables
	
}  //  @jve:decl-index=0:visual-constraint="10,10"
